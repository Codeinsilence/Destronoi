@tool
class_name VSTNode
"""
Author: George Power <george@georgepower.dev>
"""
## A node in a Voronoi Subdivision Tree.
##
## Despite the name, VSTNodes do not inheret from the Godot Node class and
## therefore cannot be used as scene objects. VSTNodes are used in the 
## construction of VSTs. A VSTNode represents a mesh data object (MeshInstance3D)
## and its relation to a single parent VSTNode and up to two child VSTNodes.
## If a VSTNode has no children then it is considered a leaf.

## An enum to define laterality. A root VSTNode would have no laterality as it
## has no parent VSTNodes. Any child VSTNode must have a laterality of left or right.
enum Laterality {NONE = 0, LEFT, RIGHT}
## The ArrayMesh data of the current VSTNode. If not the root node of the VST,
## this data is generated by [method DestronoiNode.bisect].
var _mesh_instance: MeshInstance3D = null
## An array of sites. A site is a 3-D point in space, typically placed within
## the volume of the mesh.[br]A VSTNode has 0 or 2 sites. A pair of sites are used
## to define a 3-D plane for use in [method DestronoiNode.bisect].
var _sites: PackedVector3Array
## The left child node.
var _left: VSTNode = null
## The right child node.
var _right: VSTNode = null
## The depth level in the VST. The root is the only node at level 0.
var _level: int = 0
## The laterality of the current VSTNode in relation to its parent. 
var _laterality: int = Laterality.NONE

## Initializes a VSTNode using mesh data, a depth level, and a laterality value. 
func _init(mesh_instance: MeshInstance3D, level: int = 0, lat: int = Laterality.NONE):
	_mesh_instance = mesh_instance
	_level = level
	_laterality = lat

## Return surface material override, for a specific index (0 default)
## returns null if index is out of bounds
func get_override_material(index: int = 0):
	if index > _mesh_instance.get_surface_override_material_count() - 1: return null 
	var mat := _mesh_instance.get_surface_override_material(index)
	return mat

## Return the number of sites
func get_site_count():
	return _sites.size()

func get_leaf_nodes(root: VSTNode = null, out_arr: Array = []):
	if(root == null):
		return [];
	if(root._left == null && root._right == null):
		out_arr.append(root)
		return [root]
	if(root._left != null):
		get_leaf_nodes(root._left, out_arr)
	if(root._right != null):
		get_leaf_nodes(root._right, out_arr)
	return []

func get_right_leaf_nodes(root: VSTNode = null, out_arr: Array = [], lim: int = 1, level: int = 0):
	if(root == null):
		return [];
	if(root._left == null && root._right == null) || level == lim:
		out_arr.append(root)
		return [root]
	if(root._left != null && level > 0):
		get_right_leaf_nodes(root._left, out_arr, lim, level+1)
	if(root._right != null):
		get_right_leaf_nodes(root._right, out_arr, lim, level+1)
	return []
	
func get_left_leaf_nodes(root: VSTNode = null, out_arr: Array = [], lim: int = 1, level: int = 0):
	if(root == null):
		return [];
	if(root._left == null && root._right == null) || level == lim:
		out_arr.append(root)
		return [root]
	if(root._left != null):
		get_left_leaf_nodes(root._left, out_arr, lim, level+1)
	if(root._right != null && level > 0):
		get_left_leaf_nodes(root._right, out_arr, lim, level+1)
	return []

func _to_string():
	return "VSTNode {mesh}".format({"mesh":_mesh_instance})
